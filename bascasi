Terraform  https://spacelift.io/blog/what-is-terraform
What is infrastructure as a software?
Infrastructure as Software (IaS) is the next step in managing your cloud environments.
The biggest difference between IaC(infrastructure as code) and IaS is Terraform is a powerful Infrastructure as Code (IaC) software tool offered by HashiCorp. It facilitates provisioning and managing your infrastructure on-prem and in the cloud.
It can be easily extended with the help of its plugin-based architecture.

What is Terraform Used For?
Terraform can be connected with different infrastructure hosts and achieve complex management scenarios and compliance across multiple clouds.
Its configuration can be easily packaged, shared, and reused in the form of Terraform modules.
In this post we will go over some basic elements and features of Terraform that can help you get started.
Before we move forward, however, let’s discuss Infrastructure as Code (IaC) a bit more to develop a good understanding of Terraform.


Infrastructure as Code (IaC)
Traditionally, the process of preparing a Windows or Linux server for your lab or data center consisted of several steps involving mouse clicks, running scripts, and manually configuring different aspects such as storage and networking.
Doing this at scale for hundreds or thousands of servers becomes increasingly complex and error-prone.
IaC makes this process much easier by allowing you to define and provision your infrastructure with the help of a declarative language. 
With this approach, you can gain consistency, repeatability, and enhanced reliability. 
In addition to day one infrastructure setup, this approach also helps with the management of any changes that happen to your infrastructure along the way, commonly referred to as drift management. (If you’re interested in how to manage Terraform workflows at scale, see: How to Manage Terraform at Scale)
Other common IaC tools include Cloud Formation Templates (CFT) for AWS, Azure Resource Manager (ARM) templates for Microsoft Azure, and Deployment Manager for Google cloud.

How Terraform Works?
At a high level, Terraform can be thought of as consisting of two main parts: Terraform Core and Plugins.
Core is responsible for life cycle management of infrastructure. It is the open-source binary that you download and use from the command line. 
Terraform Core takes into consideration the current state and evaluates it against your desired configuration.
It then proposes a plan to add or remove infrastructure components as needed. Next, it takes care of provisioning or decommissioning any resources if you choose to apply the plan.
Terraform Plugins provide a mechanism for Terraform Core to communicate with your infrastructure host or SaaS providers.
Terraform Providers and Provisioners are examples of plugins as mentioned above. Terraform Core communicates with the plugins via Remote Procedure Call (RPC).
 
Terraform Workflow
A typical Terraform workflow will consist of the following steps:
Step 1. Write 
Declare your infrastructure resources as code in Hashicorp Configuration Language (HCL). 
Step 2. Review the Plan
Terraform will display a plan to add or remove resources based on the comparison of your declared infrastructure and the current state of any existing resources.
Step 3. Apply
Accept the planned changes to add or remove any infrastructure resources. 
This workflow works well for a single author as Terraform State is stored locally. As more contributors join the team, 
it becomes important to ensure everyone has a correct view of the current infrastructure state and changes are applied sequentially without overlaps. 
Terraform offers Enterprise and Cloud versions for teams to work together. 
These store the state remotely so everyone can have a consistent view. 
Terraform Cloud is available as a hosted service, whereas Terraform Enterprise enables you to deploy and self-host the Terraform Cloud in your private instance. Authors contribute their code to a central version control system (e.g. Github) and Terraform Cloud uses the latest code versions from the central repository.
Core Elements of Terraform
Terraform CLI
Terraform is an open-source tool that compiles to a single binary file that can be downloaded on your system and used interactively from the command prompt. 
The latest version of Terraform can be downloaded here. A list of available Terraform commands can be retrieved from the command line
~  terraform --help                                                                  
Usage: terraform [global options] <subcommand> [args]

The available commands for execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  test          Experimental support for module integration testing
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options (use these before the subcommand, if any):
  -chdir=DIR    Switch to a different working directory before executing the
                given subcommand.
  -help         Show this help output, or the help for a specified subcommand.
  -version      An alias for the "version" subcommand.
that while an IaC tool requires you to learn its DSL, IaS allows you to program in a standard language,

Infrastructure is the foundation or framework that supports a system or organization. 
In computing, information technology infrastructure is composed of physical and virtual resources that support the flow, storage, processing and analysis of data.


data warehouse vs database
A database stores the current data required to power an application.
A data warehouse stores current and historical data from one or more systems in a predefined and fixed schema, which allows business analysts and data scientists to easily analyze the data

what is kakfa connect ?
Kafka Connect is a framework for connecting Kafka with external systems, including databases.
A Kafka Connect cluster is a separate cluster from the Kafka cluster. 
The Kafka Connect cluster supports running and scaling out connectors (components that support reading and/or writing between external systems).

What is KSQL used for?
Confluent KSQL is the streaming SQL engine that enables real-time data processing against Apache Kafka®.
It provides an easy-to-use, yet powerful interactive SQL interface for stream processing on Kafka, without the need to write code in a programming language such as Java or Python.
